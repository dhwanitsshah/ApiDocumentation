package com.apify.rest;

import org.docx4j.wml.BooleanDefaultTrue;
import org.docx4j.wml.CTBorder;
import org.docx4j.wml.Drawing;
import org.docx4j.wml.ObjectFactory;
import org.docx4j.wml.P;
import org.docx4j.wml.PPr;
import org.docx4j.wml.ParaRPr;
import org.docx4j.wml.R;
import org.docx4j.wml.RPr;
import org.docx4j.wml.STBorder;

import java.io.File;
import java.math.BigInteger;

import org.docx4j.dml.wordprocessingDrawing.Inline;
import org.docx4j.jaxb.Context;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage;
import org.docx4j.wml.Tbl;
import org.docx4j.wml.TblBorders;
import org.docx4j.wml.TblPr;
import org.docx4j.wml.Tc;
import org.docx4j.wml.TcPr;
import org.docx4j.wml.TcPrInner.VMerge;
import org.docx4j.wml.Text;
import org.docx4j.wml.Tr;
import com.apify.model.ApiSpec;

public class ApifyDocHelper {

	private static ObjectFactory factory = Context.getWmlObjectFactory();
	private static WordprocessingMLPackage wordMLPackage;

	/**
	 * We create a table with borders and add four rows with content to it, and
	 * then we add the table to the document and save it.
	 * 
	 * @throws Exception
	 */
	public static void createStyledDocumentFromApiSpec(WordprocessingMLPackage wordMLP, ApiSpec asp) throws Exception {

		wordMLPackage = wordMLP;

		// Adding AMEX logo image to the file
		File imageFile = new File(System.getProperty("user.dir") + "//amex_logo.jpg");
		String altText = "AMERICAN EXPRESS";
		org.docx4j.wml.P p = newImage(wordMLPackage, imageFile, altText, 0, 1);
		wordMLPackage.getMainDocumentPart().addObject(p);

		String labelAPITitle = "APIfy API Documentation";
		String labelAPIFooter = "This document is intended to refer the API details, "
				+ "generated by APIfy platform. Below mentioned sample request and"
				+ " response payload are for the reference purpose, client has to pass "
				+ "respective values in the request payload to consume the API.";
		String labelAPIName = "API Name : ";
		String labelAPIUrl = "API URL : ";
		String labelMethodType = "Method Type : ";
		String labelHeaders = "Headers : ";
		String labelContentType = "Content-Type : ";
		String labelRequestPayload = "Sample Request Payload: ";
		String labelResponsePayload = "Sample Response Payload: ";

		wordMLPackage.getMainDocumentPart().addStyledParagraphOfText("Title", labelAPITitle);
		wordMLPackage.getMainDocumentPart().addStyledParagraphOfText("Subtitle", labelAPIFooter);
		wordMLPackage.getMainDocumentPart().addParagraphOfText("");

		// API Name
		// Bold letter

		wordMLPackage.getMainDocumentPart().addObject(getBoldP(labelAPIName));
		wordMLPackage.getMainDocumentPart().addParagraphOfText("\t" + asp.getApiName());
		wordMLPackage.getMainDocumentPart().addParagraphOfText("");

		// API URL
		wordMLPackage.getMainDocumentPart().addObject(getBoldP(labelAPIUrl));
		wordMLPackage.getMainDocumentPart().addParagraphOfText("\t" + asp.getApiUrl());
		wordMLPackage.getMainDocumentPart().addParagraphOfText("");

		// API Method Type
		wordMLPackage.getMainDocumentPart().addObject(getBoldP(labelMethodType));
		wordMLPackage.getMainDocumentPart().addParagraphOfText("\t" + asp.getMethodType());
		wordMLPackage.getMainDocumentPart().addParagraphOfText("");

		// API Headers
		wordMLPackage.getMainDocumentPart().addObject(getBoldP(labelHeaders));
		wordMLPackage.getMainDocumentPart().addObject(getBoldP("\t" + labelContentType));
		wordMLPackage.getMainDocumentPart().addObject(getBoldP("\t\t" + asp.getContentType()));
		wordMLPackage.getMainDocumentPart().addParagraphOfText("");

		// API Sample Request
		wordMLPackage.getMainDocumentPart().addObject(getBoldP(labelRequestPayload));
		// wordMLPackage.getMainDocumentPart().addParagraphOfText("{");
		wordMLPackage.getMainDocumentPart().addParagraphOfText("\t" + asp.getRequestPayload());
		// wordMLPackage.getMainDocumentPart().addParagraphOfText("}");
		wordMLPackage.getMainDocumentPart().addParagraphOfText("");

		// API Sample Response
		wordMLPackage.getMainDocumentPart().addObject(getBoldP(labelResponsePayload));
		// wordMLPackage.getMainDocumentPart().addParagraphOfText("{");
		wordMLPackage.getMainDocumentPart().addParagraphOfText("\t" + asp.getResponsePayload());
		// wordMLPackage.getMainDocumentPart().addParagraphOfText("}");
		wordMLPackage.getMainDocumentPart().addParagraphOfText("");

		/*
		 * wordMLPackage.getMainDocumentPart().addStyledParagraphOfText("Title",
		 * "API Documentation");
		 * wordMLPackage.getMainDocumentPart().addStyledParagraphOfText(
		 * "Subtitle", "Function");
		 * wordMLPackage.getMainDocumentPart().addParagraphOfText("\t" +
		 * asp.getMethodName() + " - " + asp.getMethodInfo());
		 * wordMLPackage.getMainDocumentPart().addStyledParagraphOfText(
		 * "Subtitle", "Input Arguments:");
		 */
		// Adding

		// Write Input Arguments using Table Formatting
		/*
		 * Tbl table = factory.createTbl(); addBorders(table);
		 * 
		 * for (int i = 0; i < asp.getInputArgs().length; i++) {
		 * addTableRowWithMergedCells(asp.getInputArgs()[i].getArgumentName(),
		 * asp.getInputArgs()[i].getArgumentType(),
		 * asp.getInputArgs()[i].getArgumentInfo(), table); }
		 * wordMLPackage.getMainDocumentPart().addObject(table);
		 * 
		 * // Write Output Parameter
		 * wordMLPackage.getMainDocumentPart().addParagraphOfText("");
		 * wordMLPackage.getMainDocumentPart().addStyledParagraphOfText(
		 * "Subtitle", "Output Parameter:");
		 * wordMLPackage.getMainDocumentPart().addParagraphOfText(
		 * asp.getOutputArgs().getArgumentType() + " - " +
		 * asp.getOutputArgs().getArgumentInfo());
		 */
	}

	/**
	 * In this method we create a row, add the merged column to it, and then add
	 * two regular cells to it. Then we add the row to the table.
	 */

	private static P getBoldP(String text) {
		P p = factory.createP();
		Text t = factory.createText();
		t.setValue(text);
		R run = factory.createR();
		run.getContent().add(t);
		p.getContent().add(run);
		RPr rpr = factory.createRPr();
		BooleanDefaultTrue b = new BooleanDefaultTrue();
		b.setVal(true);
		rpr.setB(b);
		run.setRPr(rpr);
		PPr ppr = factory.createPPr();
		p.setPPr(ppr);
		ParaRPr paraRpr = factory.createParaRPr();
		ppr.setRPr(paraRpr);
		rpr.setB(b);
		return p;
	}

	private static void addTableRowWithMergedCells(String mergedContent, String field1Content, String field2Content,
			Tbl table) {
		Tr tableRow1 = factory.createTr();
		addMergedColumn(tableRow1, mergedContent);
		addTableCell(tableRow1, field1Content);
		addTableCell(tableRow1, field2Content);
		table.getContent().add(tableRow1);
	}

	/**
	 * In this method we add a column cell that is merged with cells in other
	 * rows. If the given content is null, we pass on empty content and a merge
	 * value of null.
	 */
	private static void addMergedColumn(Tr row, String content) {
		if (content == null) {
			addMergedCell(row, "", null);
		} else {
			addMergedCell(row, content, "restart");
		}
	}

	/**
	 * We create a table cell and then a table cell properties object. We also
	 * create a vertical merge object. If the merge value is not null, we set it
	 * on the object. Then we add the merge object to the table cell properties
	 * and add the properties to the table cell. Finally we set the content in
	 * the table cell and add the cell to the row.
	 *
	 * If the merge value is 'restart', a new row is started. If it is null, we
	 * continue with the previous row, thus merging the cells.
	 */
	private static void addMergedCell(Tr row, String content, String vMergeVal) {
		Tc tableCell = factory.createTc();
		TcPr tableCellProperties = new TcPr();

		VMerge merge = new VMerge();
		if (vMergeVal != null) {
			merge.setVal(vMergeVal);
		}
		tableCellProperties.setVMerge(merge);

		tableCell.setTcPr(tableCellProperties);
		if (content != null) {
			tableCell.getContent().add(wordMLPackage.getMainDocumentPart().createParagraphOfText(content));
		}

		row.getContent().add(tableCell);
	}

	/**
	 * In this method we add a table cell to the given row with the given
	 * paragraph as content.
	 */
	private static void addTableCell(Tr tr, String content) {
		Tc tc1 = factory.createTc();
		tc1.getContent().add(wordMLPackage.getMainDocumentPart().createParagraphOfText(content));
		tr.getContent().add(tc1);
	}

	/**
	 * In this method we'll add the borders to the table.
	 */
	private static void addBorders(Tbl table) {
		table.setTblPr(new TblPr());
		CTBorder border = new CTBorder();
		border.setColor("auto");
		border.setSz(new BigInteger("4"));
		border.setSpace(new BigInteger("0"));
		border.setVal(STBorder.SINGLE);

		TblBorders borders = new TblBorders();
		borders.setBottom(border);
		borders.setLeft(border);
		borders.setRight(border);
		borders.setTop(border);
		borders.setInsideH(border);
		borders.setInsideV(border);
		table.getTblPr().setTblBorders(borders);
	}

	@SuppressWarnings("deprecation")
	public static org.docx4j.wml.P newImage(WordprocessingMLPackage wordMLPackage, File imageFile, String altText,
			int id1, int id2) throws Exception {

		BinaryPartAbstractImage imagePart = BinaryPartAbstractImage.createImagePart(wordMLPackage, imageFile);
		Inline inline = imagePart.createImageInline(imageFile.getAbsolutePath(), altText, id1, id2);
		// Now add the inline in w:p/w:r/w:drawing
		// org.docx4j.wml.ObjectFactory factory = new
		// org.docx4j.wml.ObjectFactory();
		P p = factory.createP();
		R run = factory.createR();
		p.getParagraphContent().add(run);
		Drawing drawing = factory.createDrawing();
		run.getRunContent().add(drawing);
		drawing.getAnchorOrInline().add(inline);
		return p;

	}

}
